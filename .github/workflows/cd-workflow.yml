name: CD with Gradle and Docker for Cashticket Server

on:
  push:
    branches:
      - 'main'
      - 'develop'
  pull_request:
    branches:
      - 'main'
      - 'develop'

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: ☕️ Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for Gradlew
        run: chmod +x ./server/gradlew

      - name: 🐘 Build with Gradle
        working-directory: ./server
        run: ./gradlew clean build -x test --stacktrace

      - name: 💣 Build and Push Docker Image
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f ./server/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/cashticket_server:latest ./server
          docker push ${{ secrets.DOCKER_USERNAME }}/cashticket_server:latest

      - name: 🚀 Deploy without Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            echo "Uploading environment variables to EC2"

            # .pem 키를 파일로 저장
            echo "${{ secrets.EC2_KEY }}" > /tmp/Roomie.pem
            chmod 600 /tmp/Roomie.pem

            # EC2에 접속하여 작업 수행
            ssh -o StrictHostKeyChecking=no -i /tmp/Roomie.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
              echo "Writing environment variables to .env"
              echo "SPRING_DATASOURCE_DRIVER_CLASS_NAME=${{ secrets.SPRING_DATASOURCE_DRIVER_CLASS_NAME }}" > .env
              echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
              echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
              echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
              echo "REDIS_HOST=${{ secrets.AWS_EC2_REDIS_HOST }}" >> .env
              echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
  
              echo "Stopping and removing existing container"
              sudo docker stop cashticket_server || true
              sudo docker rm cashticket_server || true
            
              echo "Pulling the latest Cashticket Server image"
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/cashticket_server:latest

              echo "Running Cashticket Server container"
              sudo docker run -d --name cashticket_server -p 8080:8080 \
                --env-file .env \
                ${{ secrets.DOCKER_USERNAME }}/cashticket_server:latest

              echo "Cleaning up unused Docker images"
              sudo docker image prune -f
            EOF